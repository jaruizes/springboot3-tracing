services:
  producer:
    image: springboot3/producer:latest
    container_name: producer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      JAVA_TOOL_OPTIONS: "-javaagent:/app/lib/opentelemetry-javaagent-1.32.0.jar"
      OTEL_SERVICE_NAME: "producer"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4319"
      OTEL_METRICS_EXPORTER: "none"
      SPRING_KAFKA_PRODUCER_BOOTSTRAP-SERVERS: "kafka:9092"
    ports:
      - "8081:8081"
  consumer:
    image: springboot3/consumer:latest
    container_name: consumer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      JAVA_TOOL_OPTIONS: "-javaagent:/app/lib/opentelemetry-javaagent-1.32.0.jar"
      OTEL_SERVICE_NAME: "consumer"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4319"
      OTEL_METRICS_EXPORTER: "none"
      #      OTEL_LOGS_EXPORTER: "otlp"
      SPRING_KAFKA_CONSUMER_BOOTSTRAP-SERVERS: "kafka:9092"
    ports:
      - "8082:8082"
  zookeeper:
    image: quay.io/strimzi/kafka:0.33.0-kafka-3.3.2
    container_name: zookeeper
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      LOG_DIR: /tmp/logs
  kafka:
    image: quay.io/strimzi/kafka:0.33.0-kafka-3.3.2
    container_name: kafka
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "topic-b:1:1, topic-d:1:1"
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 30s
      interval: 5s
      timeout: 10s
      retries: 10
  otel-collector:
    image: otel/opentelemetry-collector:latest
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:Z
    ports:
      - "13133:13133"
      - "4319:4319"
    depends_on:
      - jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "9411:9411"
      - "4317:4317"
      - "4318:4318"
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_ZIPKIN_HOST_PORT: 9411
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - 9081:9081
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - SERVER_PORT=9081
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - KAFKA_CLUSTERS_0_NAME=local
#  grafana:
#    image: grafana/grafana:9.1.2
#    container_name: grafana
#    depends_on:
#      - loki
#    ports:
#      - "3000:3000"
#    environment:
#      - GF_SECURITY_ADMIN_USER=user
#      - GF_SECURITY_ADMIN_PASSWORD=password
#    volumes:
#      - ./resources/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
#      - ./resources/grafana/dashboards:/etc/grafana/provisioning/dashboards
#      - ./resources/grafana/grafana.ini:/etc/grafana/grafana.ini
#  loki:
#    image: grafana/loki:2.6.1
#    container_name: loki
#    depends_on:
#      - fluent-bit
#    ports:
#      - "3100:3100"
#    volumes:
#      - ./resources/loki/local-config.yml:/etc/loki/local-config.yaml
#  fluent-bit:
#    image: grafana/fluent-bit-plugin-loki:2.6.1-amd64
#    container_name: fluent-bit
#    ports:
#      - "24224:24224"
#    environment:
#      - LOKI_URL=http://loki:3100/loki/api/v1/push
#    volumes:
#      - ./resources/fluent-bit/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
#  tempo:
#    image: grafana/tempo:1.5.0
#    container_name: tempo
#    command: -config.file /etc/tempo-config.yml
#    ports:
#      - "3110:3100"     # Tempo
#      - "44317:4317"     # OTel
#    volumes:
#      - ./resources/tempo/tempo.yml:/etc/tempo-config.yml
#  prometheus:
#    image: prom/prometheus:v2.38.0
#    container_name: prometheus
#    command: --web.enable-remote-write-receiver --config.file=/etc/prometheus/prometheus.yml
#    ports:
#      - "9090:9090"
#    volumes:
#      - ./resources/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

